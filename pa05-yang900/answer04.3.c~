#include <stdio.h>
#include <stdbool.h>
#include "pa04.h"

// must enclose the function by #ifdef TEST_INTEGRATE 
// and #endif to enable partial credits
#ifdef TEST_INTEGRATE
void integrate(Integration * intrg)
{
  // integrate the function stored in intrg's func
  // store the result in intrg's answer
  int i = 0;
  double inte_sum = 0;
  double inte_ans = 0;
    
  for(i = 0; i < intrg -> intervals; i++)
	{
	  inte_sum = inte_sum + intrg -> func((intrg -> lowerlimit) + i * (intrg -> upperlimit - intrg -> lowerlimit) / intrg -> intervals);
	}
 
  inte_ans = ((intrg -> upperlimit - intrg -> lowerlimit) /(intrg -> intervals) * inte_sum);

  intrg -> answer = inte_ans;
}
 #endif // TEST_INTEGRATE

// must enclose the function by #ifdef RUN_INTEGRATE
// and #endif to enable partial credits

#ifdef RUN_INTEGRATE
bool  runIntegrate(char * infilename, char * outfilename)
{
  // return true if it can successfully open and read the input 
  // and open and write the output
  // return false when encountering any problem
  
  // open the input file name for reading
  FILE* num;
  num = fopen(infilename,"r");
  
  // if fopen fails, return false
  if(num == NULL)
    {
      return false;	
    }


  // read one double from the input file and store it in 
  // intrg's lowerlimit
  // use fscanf
  // check the return value. If the return value is not one
  // close the file and return false
  Integration intrg;
  double input1 = fscanf(num, "%lf", &(intrg.lowerlimit));
  if(input1 != 1)
    {
      fclose(num);
      return false;
    }


  // read one double from the input file and store it in 
  // intrg's upperlimit
  // use fscanf
  // check the return value. If the return value is not one
  // close the file and return false

  double input2 = fscanf(num, "%lf", &(intrg.upperlimit));
  if(input2 != 1)
    {
      fclose(num);
      return false;
    }



  // read one int from the input file and store it in 
  // intrg's intervals
  // use fscanf
  // check the return value. If the return value is not one
  // close the file and return false

  int input3 = fscanf(num,"%d", &(intrg.intervals));
  if(input3 != 1)
    {
      fclose(num);
      return false;
    }


  // close the input file

  fclose(num);

  // open the output file for writing
  // if fopen fails, return false
  FILE* openf = fopen(outfilename,"w");
  if(openf == NULL)
    {
      return false;
    }

  // create an array of funcptr called funcs with five elements:
  // func1, func2, ..., func5
  funcptr funcs[] = {func1, func2, func3, func4, func5};

  // go through the elements in funcs 
  // for each element, call integrate for that function
  // write the result (stored in intrg's answer to 
  // the output file. each answer occupies one line (add "\n")
  // use fprintf
  int func_num = sizeof(funcs) / sizeof(funcptr);
  for(int ct = 0; ct < func_num; ct++)
    {
      intrg.func = funcs[ct];
      integrate(&intrg);
      if(fprintf(openf, "%f\n",intrg.answer) < 1)
	{
	  fclose(openf);
	  return false;
	}
    }


  // check the return value of fprintf. 
  // If it is less one one, close the output
  // file and return false
  
  // after going through all functions in funcs
  // close the output file
  
  fclose(openf);
  
  // if the function reaches here, return true

  return true;
}
#endif // RUN_INTEGRATE
